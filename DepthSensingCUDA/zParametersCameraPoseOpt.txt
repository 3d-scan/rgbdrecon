// False to use Kinect to scan
s_bReadRGBData = true  // if false, all the rest parameters below will NOT be used
s_bReadCameraPoseFromFile = false
s_bStoreCameraPoseIntoFile = true // You still need to press 'S' to store the camera pose into file after running the program
s_bIsCameraPoseQuaternion = true
s_bDrawCorrespondenceBetweenImages = false
s_bCheckDepthValInReliableRange = false
s_bUseWeightedOptimization = false

// 0 = TUM RGB-D, 1 = ICL-NUIM, 2 = Self-Scanned with Kinect v1.0
// NOTE: the depth and rgb images for all the data is the same, while the difference is the calibration matrix parameters below.
s_uRGBDataType = 1

// camera calibration matrix for TUM RGB-D data
//s_fx = 525.0
//s_fy = 525.0
//s_cx = 319.5
//s_cy = 239.5

// camera calibration matrix for the ICL-NUIM data
// NOTE: originally fy = -480.0 in the ICL-NUIM data, but it will reverse the y-coordinate of the reconstructed model.
// So we made some correction on each trajectory in the code to enable the consistency. See "readCameraPoseFromFile()" 
// in "KinectSensor.cpp" for details. Therefore, please use positive fy (480.0) here.
//s_fx = 481.20
//s_fy = 480.0 // positive value instead of the original negative one
//s_cx = 319.50
//s_cy = 239.50

// camera calibration matrix for the Asus XTion depth camera
s_fx = 570.342163
s_fy = 570.342224
s_cx = 320
s_cy = 240


// Data paths
//s_strDataPath = "../../../data/test/"
//s_strDataPath = " ../../../data/RGBD_benchmark/rgbd_dataset_freiburg1_floor/"
//s_strDataPath = " ../../../data/ICL-NUIM/living_room_traj2_frei_png.tar/"
s_strDataPath = " ../../../data/room_board_rgb640x480_depth640x480/"
//s_strTrajFile = "traj_method0_groundtruth"
s_strTrajFile = "livingRoom2.gt.freiburg"
//s_strTrajFile = "traj_method0"
s_strAssociationFile = "association.txt" // CHAO: the order in the association file MUST be: DEPTH first RGB second

// Camera pose estimation method type
// 0: original method (seems geometrical ICP only, from original code)
// 1: RGB-D tracking method (seems do NOT work right now, also from original code)
// 2: our optimization method 
s_uCameraPoseEstimationType = 0 // (if false, all the rest flags will NOT be used)

// Camera pose optimization method type:
//	0: qj is the average center of all frames (current frame and all previous frame). Use ICP result as initial R_i and t_i for frame i
//	1: qj is the average center of all previous frames 
//  2: qj is the corresponding point in the last frame
//  3: qj is the average center of all frames (current frame and all previous frame). Use Identity matrix as initial R_i and t_i for frame i
//  4: qj is the average center of all previous frames, and run an ICP after optimization
s_uOptMethodType = 1

// Scale factor (in meter) for the depth data. hat is, each depth value you read from the depth image (range: 0-65536) should be divided by the
// scale factor to get its real depth value in meters. For instance, TUM and ICL-NUIM data both use scale factor 5000, and a depth value 5000
// you read from the depth image denotes 1m in the real world.
s_uDepthScaleFactor = 5000

// Parameters for data-reading process
s_uFrameCount = 0
s_uMinimumFrameIndex = 0 // starting frame index (could be any value smaller than s_uMaximumFrameIndex)
s_uMaximumFrameIndex = 1000 // maximum frame index (could be any value NO smaller than s_uMinimumFrameIndex)
s_uFrameInterval = 1 // frame jumping interval
s_uCurrentFrameIndex = 0 // frame index you are reading currently (always starting from 0)

// Parameters for RGB-D data
s_depthWidth = 640
s_depthHeight = 480
s_colorWidth = 640
s_colorHeight = 480
s_maxReliableDepth = 4500
s_minReliableDepth = 500

// Parameters pose optimization
s_thresholdGrayValueDiff = 3
s_thresholdMinCrspdnsPairNumber = 10
s_thresholdCoordiff = 0.01
s_threshold_energy = 0.01f
s_thresholdMinDepthValDiff = 50
s_thresholdRansacReproj = 10.0
s_weightScaleFactor = 5.0